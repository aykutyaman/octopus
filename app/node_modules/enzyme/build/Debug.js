'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.typeName = typeName;
exports.spaces = spaces;
exports.indent = indent;
exports.debugNode = debugNode;
exports.debugNodes = debugNodes;

var _ShallowTraversal = require('./ShallowTraversal');

var _Utils = require('./Utils');

var _underscore = require('underscore');

function typeName(node) {
  return typeof node.type === 'function' ? node.type.displayName || 'Component' : node.type;
}

function spaces(n) {
  return Array(n + 1).join(' ');
}

function indent(depth, string) {
  return string.split('\n').map(function (x) {
    return '' + String(spaces(depth)) + String(x);
  }).join('\n');
}

function propString(prop) {
  switch (typeof prop === 'undefined' ? 'undefined' : _typeof(prop)) {
    case 'function':
      return '{[Function]}';
    case 'string':
      return '"' + String(prop) + '"';
    case 'number':
    case 'boolean':
      return '{' + String(prop) + '}';
    case 'object':
      return '{{...}}';
    default:
      return '{[' + (typeof prop === 'undefined' ? 'undefined' : _typeof(prop)) + ']}';
  }
}

function propsString(node) {
  var props = (0, _Utils.propsOfNode)(node);
  var keys = (0, _underscore.without)(Object.keys(props), 'children');
  return keys.map(function (key) {
    return String(key) + '=' + String(propString(props[key]));
  }).join(' ');
}

function debugNode(node) {
  var indentLength = arguments.length <= 1 || arguments[1] === undefined ? 2 : arguments[1];

  if (!node) return '';
  if (typeof node === 'string') return (0, _underscore.escape)(node);

  var children = (0, _underscore.compact)((0, _ShallowTraversal.childrenOfNode)(node).map(function (n) {
    return debugNode(n, indentLength);
  }));
  var type = typeName(node);
  var props = propsString(node);
  var beforeProps = props ? ' ' : '';
  var nodeClose = children.length ? '</' + String(type) + '>' : '/>';
  var afterProps = children.length ? '>' : ' ';
  var childrenIndented = children.length ? '\n' + children.map(function (x) {
    return indent(indentLength, x);
  }).join('\n') + '\n' : '';
  return '<' + String(type) + beforeProps + String(props) + afterProps + childrenIndented + nodeClose;
}

function debugNodes(nodes) {
  return nodes.map(debugNode).join('\n\n\n');
}